/**
 *@file audioPlayer.c
 *
 *@brief
 *  - core module for audio player
 *
 * Target:   Xilinx Zynq Zedboard
 * Compiler/IDE: GCC - Xilinx SDK 2015.4
 *
 * @author:  Gunar Schirner
 *           Rohan Kangralkar
 * @date	03/08/2010
 *
 * LastChange:
 * $Id: audioPlayer.c 1009 2016-04-03 20:00:02Z surya2891 $
 *
 *******************************************************************************/

#include "audioPlayer.h"
#include "zedboard_freertos.h"
#include "audioRxTx.h"

#include "platform.h"
#include "zed_hdmi_display.h"
#include "task.h"

#include "fprof.h"

#include "gpio_interrupt.h"

/* number of chunks to allocate */
#define CHUNK_NUM 30

/* size of each chunk in bytes */
#define CHUNK_SIZE 512

#define VOLUME_CHANGE_STEP (4)
#define VOLUME_MAX (0x7F)
#define VOLUME_MIN (0x2F)

// global frequency profile struct
fprof_t fprof;

static void display_task (void *pArg);
static void gpio_task( void *pvParameters );

int audioPlayer_init(audioPlayer_t *pThis) {
    int status = 0;
    printf("[AP]: Init start\r\n");
    
    pThis->volume 		= VOLUME_MIN; /*default volume */
    pThis->frequency 	= 48000; /* default frequency */
    
    /* Init I2C/I2S/CODEC and AXI Streaming FIFO */
	Adau1761_Init(&pThis->codec);

	/* Allocate buffer pool and Init Chunk/freelist*/
	status = bufferPool_d_init(&pThis->bp, CHUNK_NUM, CHUNK_SIZE);
    if ( PASS != status ) {
        return FAIL;
    }

    /* Initialize the Audio RX/TX module*/
    status = audioRxTx_init(&pThis->Audio, &pThis->bp) ;
    if ( PASS != status) {
        return FAIL;
    }

    printf("[AP]: Init complete\r\n");
    return PASS;
}


/** audioPlayer task creation.
 *@param pThis  pointer to the globally declared and initialized audioPlayer object
 *
 *@return 0 success, non-zero otherwise
 **/
int audioPlayer_start(audioPlayer_t *pThis)
{
    printf("[AP]: startup \r\n");

    /* create the gpio task */
    xTaskCreate( gpio_task, ( signed char * ) "GPIO", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1 , NULL );

	/* create the audio task */
	xTaskCreate( audioPlayer_task, ( signed char * ) "HW", configMINIMAL_STACK_SIZE, pThis, tskIDLE_PRIORITY + 1 , NULL );

	/* create the display task */
	xTaskCreate( display_task, ( signed char * ) "HW", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1 , NULL );

    return PASS;
}



/** main loop of audio player does not terminate
 *@param pThis  pointer to the globally declared and initialized audioPlayer object
 *
 *@return 0 success, non-zero otherwise
 **/
void audioPlayer_task (void *pArg) {
    
	int status = FAIL;
	audioPlayer_t *pThis = (audioPlayer_t *)  pArg;
	chunk_d_t *pChunk = NULL;

    /* Start the audio module (FIFO Interrupt Enable)*/
    status = audioRxTx_start(&pThis->Audio);
	if (status != 1) {
        return;
    }

	/* Main loop */
	while(1){
    		/** Get Audio Chunk */
			audioRxTx_get(&pThis->Audio, &pChunk);

			/* Transmit the data that was received from the RX Queue */
			audioRxTx_put(&pThis->Audio, pChunk);
     }
}

/* GPIO Task */
static void gpio_task( void *pvParameters )
{
    /* Create a queue capable of containing 10 unsigned long values. */
    gpio_queue = xQueueCreate( 10, sizeof(int));

    gpio_init(&gpio_queue);

    for(;;)
    {
        u32 value;
        /* Receive the counter value from Queue */
        if( xQueueReceive( gpio_queue, &value, 1000) )
        {
            vTaskDelay(1);
            u32 gpio_data = (*(volatile u32 *)GPIO_DATA_2);

            if ((gpio_data & BTN_LEFT) & (value & BTN_LEFT))
            {
                fprof_decSel(&fprof);
            }
            if ((gpio_data & BTN_CENTER) & (value & BTN_CENTER))
            {
                fprof_init(&fprof);
            }
            if ((gpio_data & BTN_DOWN) & (value & BTN_DOWN))
            {
                fprof_decBand(&fprof);
            }
            if ((gpio_data & BTN_RIGHT) & (value & BTN_RIGHT))
            {
                fprof_incSel(&fprof);
            }
            if ((gpio_data & BTN_UP) & (value & BTN_UP))
            {
                fprof_incBand(&fprof);
            }

            // Re-enable interrupts
            *(volatile u32 *)GPIO_INT_EN_2 = BTN_ALL;
        }
    }

    // suspend this task. All activities are in interrupts.
    vTaskSuspend(NULL);
}

void display_task (void *pArg)
{
	// init frequency profiling
	fprof_init(&fprof);

	zed_hdmi_display_init();
	int heights[] = {1, 3, 2, 4, 3, 5, 6, 7};
	modify_display_heights(heights, 3);
	int i;
	i = 0;
	while(1)
	{
		i =(i+1)%16;
		heights[2] = i;
		modify_display_heights(heights,3);
		vTaskDelay(100);
	}
}
