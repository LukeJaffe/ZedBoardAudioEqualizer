#ifndef FPROF_H
#define FPROF_H

#define CHUNK_SAMPLES 	(128)
#define CHUNK_BYTES 	(CHUNK_SAMPLES*4)
#define FFT_SAMPLES		(1024)
#define FFT_CHUNKS		(FFT_SAMPLES/CHUNK_SAMPLES * 2)
#define NUM_CHANNELS 	(2)

#define ARRAY_SIZE		(FFT_SAMPLES)
#define SCALING_SIZE	(ARRAY_SIZE/2 + 1)

#define NUM_BANDS       (8) // anchor bands
#define NUM_SUB_BANDS	(ARRAY_SIZE/NUM_BANDS) // bands per anchor
#define MID_BAND_VAL	(8)
#define MAX_BAND_VAL    (16)
#define MIN_BAND_VAL    (0)

#define FSAMPLE		    	(16000)

float frequency_scalars[SCALING_SIZE];
float ibands[IP_BANDS];

// frequency profile struct
typedef struct
{
    int bands[NUM_BANDS];
    int selected;
} fprof_t;

const static float freqs[] =
{
	0.0,
	16.35,
	32.70,
	65.41,
	130.81,
	261.63,
	523.25,
	1046.50,
	2093.00,
	4186.01,
    FSAMPLE,
};

const int num_freqs = sizeof(freqs)/sizeof(float);

void fprof_init(fprof_t* this);

void fprof_incSel(fprof_t* this);

void fprof_decSel(fprof_t* this);

void fprof_incBand(fprof_t* this);

void fprof_decBand(fprof_t* this);

void fprof_getBands(fprof_t* this, char buffer[12]);

void fprof_getScalars(fprof_t* this, float scalars[ARRAY_SIZE]);

#endif
