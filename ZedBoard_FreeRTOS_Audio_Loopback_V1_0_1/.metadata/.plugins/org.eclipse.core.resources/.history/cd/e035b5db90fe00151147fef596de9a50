/*
 * test_fft.h
 *
 *  Created on: Apr 9, 2016
 *      Author: root
 */

#ifndef TEST_FFT_H_
#define TEST_FFT_H_

#include "kiss_fftr.h"

#define THRESH      (8000000.0)
#define FFT_MEM     (2312)
#define CHUNK_BYTES (CHUNK_SIZE/4)

const size_t fft_mem = FFT_MEM;

kiss_fft_scalar mem[FFT_MEM];
kiss_fft_scalar in[CHUNK_BYTES];
kiss_fft_cpx out[CHUNK_BYTES / 2 + 1];


void TestFftReal(const char* title, const kiss_fft_scalar in[CHUNK_BYTES], kiss_fft_cpx out[CHUNK_BYTES / 2 + 1])
{
  kiss_fftr_cfg cfg;

  if ((cfg = kiss_fftr_alloc(CHUNK_BYTES, 0/*is_inverse_fft*/, mem, &fft_mem)) != NULL)
  {
    kiss_fftr(cfg, in, out);
  }
  else
  {
    printf("not enough memory: (fft)\n");
    exit(-1);
  }

  // Frequency domain processing
  /*
  int i;
  for (i = 0; i < (CHUNK_BYTES / 2 + 1); i++)
  {

      if (out[i].r < -THRESH)
          out[i].r = -THRESH;
      if (out[i].r > THRESH)
          out[i].r = THRESH;

      if (out[i].i < -THRESH)
          out[i].i = -THRESH;
      if (out[i].i > THRESH)
          out[i].i = THRESH;

      //printf("r: %f, i: %f\n", out[i].r, out[i].i);
  }
  */

  if ((cfg = kiss_fftr_alloc(CHUNK_BYTES, 1/*is_inverse_fft*/, mem, &fft_mem)) != NULL)
  {
    kiss_fftri(cfg, out, in);
  }
  else
  {
    printf("not enough memory: (ifft)\n");
    exit(-1);
  }

}


#endif /* TEST_FFT_H_ */
