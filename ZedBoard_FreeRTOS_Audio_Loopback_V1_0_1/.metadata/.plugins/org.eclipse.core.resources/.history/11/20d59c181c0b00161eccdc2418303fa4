/*
 * fprof.c
 *
 *  Created on: Apr 20, 2016
 *      Author: jaffe.lu
 */
#include "fprof.h"

#define SAMPLES_PER_BAND	(FFT_SAMPLES/NUM_BANDS)

#define INPUT_SIZE      	(ARRAY_SIZE)
#define OUTPUT_SIZE    		(SCALING_SIZE)
#define IP_BANDS	    	(8)
#define FSAMPLE		    	(16000)
#define K			((float)FSAMPLE/(float)OUTPUT_SIZE)

const static float freqs[] =
{
	0.0,
	16.35,
	32.70,
	65.41,
	130.81,
	261.63,
	523.25,
	1046.50,
	2093.00,
	4186.01,
    FSAMPLE,
};

const int num_freqs = sizeof(freqs)/sizeof(float);

void fprof_init(fprof_t* this)
{
    int i, j;
    //for (i = 0; i < NUM_BANDS; i++)
    //  this->bands[i] = 4;

    this->bands[0] = 1;
    this->bands[1] = 2;
    this->bands[2] = 3;
    this->bands[3] = 4;
    this->bands[4] = 8;
    this->bands[5] = 8;
    this->bands[6] = 8;
    this->bands[7] = 8;

    this->selected = 3;

    // initialize frequency scalars
    //for (i = 0; i < 100; i++)
    //	frequency_scalars[i] = 1.0;
    //for (i = 100; i < SCALING_SIZE; i++)
    //	frequency_scalars[i] = 1.0;

    //int bands[10];
    //float k;

    for (i = 0; i < num_freqs; i++)
    	if (i < 8)
    	{
			for (j = (1<<i) - 1; j < (1<<(i+1)) - 1; j++)
				frequency_scalars[j] = (float)this->bands[i]/(float)MAX_BAND_VAL;
    	}
    	else
    	{
    		frequency_scalars[j] = 1.0;
    	}
    /*
    for (i = 0; i < num_freqs-1; i++)
    {
		bands[i] = 0;
        for (k = freqs[i]; k < freqs[i+1] && j < OUTPUT_SIZE; k = j*K, j++)
        {
            bands[i]++;
        }
    }

    for (i = 0; i < num_freqs-1; i++)
        for (j = bands[i]; j < bands[i+1]; j++)
            frequency_scalars[j-bands[0]] = (float)this->bands[i]/(float)MAX_BAND_VAL;
     */

    //for (i = 0; i < SCALING_SIZE; i++)
    //	frequency_scalars[i] = 1.0;
}

void fprof_incSel(fprof_t* this)
{
    if (this->selected < NUM_BANDS-1)
        this->selected++;
}

void fprof_decSel(fprof_t* this)
{
    if (this->selected > 0)
        this->selected--;
}

void fprof_incBand(fprof_t* this)
{
    if (this->bands[this->selected] < MAX_BAND_VAL-1)
        this->bands[this->selected]++;
}

void fprof_decBand(fprof_t* this)
{
    if (this->bands[this->selected] > MIN_BAND_VAL)
        this->bands[this->selected]--;
}

void fprof_getBands(fprof_t* this, char buffer[12])
{
    int i;
    buffer[0] = 'S';
    buffer[1] = this->selected + '0';
    for (i = 2; i < 2+NUM_BANDS; i++)
        buffer[i] = this->bands[i-2] + '0';
    buffer[NUM_BANDS+2] = 'E';
    buffer[NUM_BANDS+3] = '\0';
}

void fprof_getScalars(fprof_t* this, float scalars[ARRAY_SIZE])
{
	int i, j;
	float diff, inc, val;
	for (i = 0; i < NUM_BANDS-1; i++)
	{
		diff = (float)(this->bands[i+1] - this->bands[i]);
		inc = diff/(float)NUM_SUB_BANDS;
		for (j = 0; j < NUM_SUB_BANDS; j++)
		{
			val = ((float)this->bands[i]) + ((float)j)*inc;
			scalars[i*NUM_SUB_BANDS + j] = val;
		}
	}
}
